use proc_macro::{TokenStream};
use quote::quote;
use syn::{AttributeArgs, parse_macro_input};


#[proc_macro_attribute]
pub fn state(args: TokenStream, item: TokenStream) -> TokenStream {
  state_impl(args, item)
}

pub(crate) fn state_impl(args: TokenStream, item: TokenStream)-> TokenStream{
/*
  let args = parse_macro_input!(args as AttributeArgs);
    for arg in args.iter(){
        //println!("{:?}", arg)
    }
  */  quote! {}.into()
}

#[cfg(test)]
mod test{
use std::str::FromStr;
use syn::ItemStruct;

use proc_macro::TokenStream;
#[test]
fn test_just_for_fn() {
    let item = "impl State<#name> for UserStateMachine{ }";
    let item_tokens = TokenStream::from_str(item).unwrap();

    let attr = "#[state(name = S1, super_state = Top)]";
    let attr_tokens = TokenStream::from_str(attr).unwrap();

    crate::state_impl(attr_tokens, item_tokens); 
   }
}
